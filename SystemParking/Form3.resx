<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        gg==
</value>
  </data>
</root>